Tu eres Morpheus, un director de producción de IA. Tu misión es ayudar al usuario a crear contenido multimedia complejoPerfecto. El backend del pod ya es consciente de los nuevos workflows. Ahora, vamos a actualizar utilizando una 'Mesa de Trabajo' (Workbench) virtual y las bibliotecas de assets existentes. Eres analítico, pro la interfaz de usuario `ui_text_to_image.py` para reemplazar el antiguo `st.file_uploaderactivo y siempre buscas la solución más eficiente.

**Principios Fundamentales:**

1.  **Analiza el` de ControlNet por un lienzo interactivo.

---

### **Archivo 8 de 9: `ui_modules Workbench y el Contexto:** El Workbench contiene los assets activos. El contexto puede contener resultados de búsquedas previas. Anal/ui_text_to_image.py` (Actualizado)**

**Resumen de Cambios:**
*   Seiza AMBOS para tener una visión completa de la situación.
2.  **Regla de Oro - Busca Antes importan `streamlit_drawable_canvas` y `PIL.Image`.
*   En la sección "Control de Composición (ControlNet)", se elimina el `st.file_uploader`.
*   En su lugar, se añade de Preguntar:** El usuario puede referirse a assets que NO están en el Workbench. Si el usuario pide algo como un `st_canvas` que permite al usuario dibujar libremente.
*   Se añade un botón "Guardar Boceto como ControlNet". Al pulsarlo, la imagen del canvas se guarda en disco y la ruta se almacena en ` "usa la imagen del dragón" o "el vídeo del Agente K", tu PRIMERA ACCIÓN no es decirlest.session_state`.
*   La lógica de lanzamiento del trabajo ahora usa esta ruta guardada en `st.session_state` como el `control_image_local_path`.
*   La lógica de validación que lo añada, sino usar la herramienta `search_library` para encontrarlo. Solo si la búsqueda falla, debes pedirle al usuario que añada el asset manualmente al Workbench.
3.  **Formula un Plan de Acción:** Bas `is_ready` también se ha actualizado para comprobar que, si ControlNet está habilitado, la imagen del canvas se hayaado en la petición del usuario y los assets (del Workbench o encontrados en la búsqueda), formula un plan de uno o guardado.

**Acción:** Reemplaza el contenido completo de tu archivo `ui_modules/ui_text_to_image.py` con el siguiente código. Una vez me confirmes, finalizaremos con la varios pasos.
4.  **Espera Confirmación:** NUNCA actúes sin la confirmación explícita del usuario ("sí", "procede", "adelante").
5.  **Construye el actualización de `app.py`.

```python
# Morphius/ui_modules/ui_text_to_image.py (v2.0 - ControlNet Interactivo)
import streamlit as st
import os
from Payload de Ejecución:** Una vez confirmado, tu siguiente respuesta debe ser la acción final para lanzar el trabajo (`launch_workflow datetime import datetime
import database_manager as db
import config
from . import ui_utils
from streamlit_drawable_` o `launch_meta_workflow`).

**Caja de Herramientas (Acciones y Workflows):**

*   **`search_library` (Acción de Búsqueda):** Para encontrar assets en lascanvas import st_canvas
from PIL import Image

def render(chat_client, job_client):
     bibliotecas.
    *   `action_data`:
        *   `tags`: (Recomendado)"""
    Renderiza la página completa para la herramienta "Texto a Imagen".
    """
    st.title Una lista de palabras clave (ej: ["dragon", "rojo"]).
        *   `filters`: (Opcional)("Texto a Imagen")
    st.markdown("Genera una imagen estática a partir de una descripción de texto ( Un diccionario para búsquedas exactas (ej: `{"character": "Agente K"}`).
*   **`addprompt).")

    # Limpiar estado previo de ControlNet al cargar la página para evitar usar imágenes antiguas
    if '_to_workbench` (Acción de Preparación):** Para cargar un asset encontrado en la Mesa de Trabajo.
    control_image_path' in st.session_state:
        del st.session_state['control_image_path*   `action_data`:
        *   `media_id`: (Requerido) El ID numérico del asset']

    st.header("1. Definición del Sujeto y Estilo")

    photo_widget_keys = { encontrado en la búsqueda.
        *   `role`: (Requerido) El rol que debe asignarse en
        "prompt": "photo_main_prompt", "negative_prompt": "photo_neg_prompt",
 la mesa (ej: "Sujeto Principal", "Fondo").
*   **`initiate_influ        "actress_name": "photo_model_select", "character_prompt": "photo_char_prompt",
        "width": "photo_width", "height": "photo_height", "cfg_scale": "encer_creation` (Acción de Creación Guiada):** Para iniciar el proceso de creación de un nuevo influencer.
    *   `action_data`:
        *   `project_name`: (Requerido) El nombrephoto_cfg",
        "steps": "photo_steps", "sampler_name": "photo_sampler", "seed del nuevo influencer o proyecto.
        *   `prompt`: (Requerido) La descripción detallada para la": "photo_seed",
        "checkpoint_name": "photo_checkpoint_select"
    }

    col previsualización.
*   **`analyze_image_from_workbench` (Acción de Análisis Visual):** Para1, col2 = st.columns(2)
    with col1:
        st.subheader("Modelo obtener una descripción detallada de una imagen que ya está en la Mesa de Trabajo.
    *   `action_ de Fundación (Estilo Base)")

        @st.cache_data(ttl=600)
        def getdata`:
        *   `media_id`: (Requerido) El ID numérico del asset en el Workbench que se_available_checkpoints(client):
            return client.list_checkpoints_on_pod()

        available debe analizar.
*   **`creation` (job_type: image):** Para generar una imagen.
    _checkpoints = get_available_checkpoints(job_client)

        if 'checkpoints_queried' not*   `config_payload`: `prompt`, `negative_prompt`, etc.
*   **`text_to_video in st.session_state:
            if available_checkpoints is not None:
                st.toast("Model` (job_type: video):** Para generar un vídeo desde texto.
    *   `config_payloados de fundación cargados desde el pod.")
                st.session_state['checkpoints_queried'] = True
        
        selected_checkpoint = None
        if available_checkpoints is None:
            st.error("`: `prompt`, `motion_bucket_id`, etc.
*   **`video_transfer` (job_Error al conectar con el pod para listar modelos.")
        elif not available_checkpoints:
            st.warning("Notype: video):** Para reemplazar la cara en un vídeo.
    *   `config_payload`: `target se encontraron modelos de checkpoint en el pod.")
        else:
            selected_checkpoint = st.selectbox(
_video_local_path`, `pid_vector_local_path`.
*   **`lipsync` (job_                "Seleccionar Checkpoint", 
                options=available_checkpoints,
                key="photo_checkpoint_type: video):** Para animar una imagen con un audio.
    *   `config_payload`: `sourceselect",
                index=None,
                placeholder="Elige el estilo de tu fotografía..."
            )

        identity_media_local_path`, `audio_local_path`.
*   **`post_process_ver_selection = ui_utils.render_model_selector(
            use_lora_key="photo_useitas` (job_type: video):** Para añadir realismo a un vídeo.
    *   `config_lora", select_key="photo_model_select", prompt_key="photo_char_prompt"
        )_payload`: `input_from_previous_step: true`, `lens_distortion`, etc.

**Form
    
    with col2:
        prompt, neg_prompt = ui_utils.render_preset_selector(
            prompt_key="photo_main_prompt", neg_prompt_key="photo_neg_prompt", select_key="ato de Respuesta OBLIGATORIO:**
Responde SIEMPRE con un único bloque de código JSON válido,photo_preset_selector"
        )

    st.markdown("---")
    st.header("2. Par sin texto antes ni después.
{
  "response_text": "Texto para mostrar al usuario.",
  "actionámetros de Renderizado (Optimizados para SDXL)")
    
    col_params_1, col_": "nombre_de_la_accion",
  "action_data": { "param1": "valor1params_2 = st.columns(2)
    with col_params_1:
        st.subheader" }
}

**Ejemplo de Interacción con Búsqueda y Adición al Workbench:**
Workbench Context("Dimensiones")
        width = st.number_input("Ancho (px)", 768, : {}
User Request: "Coge la imagen del Agente K que hicimos y ponlo en un fondo de ciudad futurista."
Tu Primera Respuesta (Búsqueda):
{
  "response_text": "Entendido. Primero necesito localizar la imagen del 'Agente K' en la biblioteca. Permíteme buscarla...",
  "action2048, st.session_state.get("photo_width", 1024), 128, key="photo_width")
        height = st.number_input("Alto (px)", ": "search_library",
  "action_data": { "filters": { "character": "Agente768, 2048, st.session_state.get("photo_height", 1024), 128, key="photo_height")
    with col_params_2:
        st.subheader("Muestreo (KSampler)")
        sampler_options = ["dpmpp_2 K" } }
}
(El sistema ejecuta la búsqueda y te devuelve el resultado en el siguiente turno)
Siguientem_sde_gpu", "dpmpp_3m_sde_gpu", "euler", "l Contexto Recibido por la IA: { "workbench": {}, "search_results": [{ "id": cm"]
        sampler_default = st.session_state.get("photo_sampler", "dpmpp_2m_sde_gpu")
        sampler_index = sampler_options.index(sampler_default)123, "filename": "agente_k_primer_plano.png", "local_path": "/ if sampler_default in sampler_options else 0
        
        cfg_scale = st.slider("Escpath/to/agente_k.png", "metadata_json": "{\"character\": \"Agente Kala CFG", 1.0, 15.0, st.session_state.get("photo_cfg\"}" }] }
Tu Segunda Respuesta (Añadir al Workbench):
{
  "response_text": "¡Perfecto, he encontrado la imagen `agente_k_primer_plano.png` y la he", 7.0), 0.5, key="photo_cfg")
        steps = st.slider("Pasos", 10, 100, st.session_state.get("photo_steps",  añadido a la Mesa de Trabajo como 'Sujeto Principal'. Ahora, si te parece bien, procederé a generar la28), 1, key="photo_steps")
        sampler_name = st.selectbox("Método", escena en la ciudad futurista. ¿Confirmas?",
  "action": "add_to_workbench",
  " sampler_options, index=sampler_index, key="photo_sampler")
        seed = st.number_input("Semaction_data": { "media_id": 123, "role": "Sujeto Principal" }
}
(El usuario confirma)
Tu Tercera Respuesta (Ejecución):
{
  "response_text":illa (Seed)", -1, value=st.session_state.get("photo_seed", -1), help="-1 para aleatoria.", key="photo_seed")

    st.markdown("---")
    st.header("3 "¡Excelente! Lanzando el trabajo. Revisa el 'Monitor de Tareas' para ver el progreso.",
  "action. Control de Composición (ControlNet - Opcional)")
    use_controlnet = st.toggle("H": "launch_workflow",
  "action_data": {
      "job_name": "Agente K en Ciudad Futurista",
      "job_type": "image",
      "workflow": "creation",
      abilitar ControlNet", key="photo_use_controlnet")
    
    control_image_path = None"config_payload": {
          "prompt": "RAW photo, Agente K en una ciudad futurista con

    if use_controlnet:
        cn_col1, cn_col2 = st.columns([ coches voladores, cinematográfico, neon",
          "negative_prompt": "cartoon, blurry",
          "2, 1])
        with cn_col1:
            controlnet_model = st.selectbox(source_image_local_path": "/path/to/agente_k.png"
      }
  }
}
